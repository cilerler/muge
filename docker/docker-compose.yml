networks:
  default:
    name: muge_network
    driver: bridge

services:

  # placement:
  #   container_name: placement
  #   image: "daprio/dapr:1.16.1"
  #   command: ["./placement", "-port", "50005"]
  #   ports:
  #     - 50005:50005


  # otel-collector:
  #   container_name: otel-collector
  #   image: otel/opentelemetry-collector-contrib:0.138.0
  #   command: ["--config=/etc/otelcol-contrib/config.yaml"]
  #   volumes:
  #     - ./config/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
  #   ports:
  #     - 4317:4317   # OTLP gRPC receiver
  #     - 4318:4318   # OTLP http receiver
  #   expose:
  #     - 1888        # pprof extension
  #     - 8888        # Prometheus metrics exposed by the Collector
  #     - 8889        # Prometheus exporter metrics
  #     - 13133       # health_check extension
  #     - 55679       # zpages extension
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://host.docker.internal:12201"
  #       tag: "otel-collector"
  #   restart: "unless-stopped"
  #   depends_on:
  #     - seq-ingestion
  #     - aspire-dashboard


  # seq-ingestion:
  #   container_name: "seq-ingestion"
  #   image: datalust/seq-input-gelf:latest
  #   ports:
  #     - "12201:12201/udp"
  #   environment:
  #     SEQ_ADDRESS: "http://seq:5341"
  #   restart: unless-stopped
  #   depends_on:
  #     - seq


  seq:
    container_name: seq
    image: datalust/seq:latest
    environment:
      ACCEPT_EULA: "Y"
      SEQ_FIRSTRUN_ADMINUSERNAME: "${SEQ_FIRSTRUN_ADMINUSERNAME}"
      SEQ_FIRSTRUN_ADMINPASSWORD: "${SEQ_FIRSTRUN_ADMINPASSWORD}"
    volumes:
      - ~/.docker/volumes/muge/seq/data:/data
    ports:
      - "5341:5341"
      - "15341:80"


  aspire:
    container_name: aspire
    image: "mcr.microsoft.com/dotnet/nightly/aspire-dashboard:latest"
    environment:
      ASPIRE_DASHBOARD_FORWARDEDHEADERS_ENABLED: "true"
    ports:
      - "18888:18888"
    expose:
      - "18889"


  alloy:
    container_name: alloy
    image: grafana/alloy:v1.11.2
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --stability.level=generally-available
    volumes:
      - ./config/alloy-config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 12345:12345  # Alloy UI
      - 4317:4317    # OTLP gRPC receiver
      - 4318:4318    # OTLP HTTP receiver


  loki:
    container_name: loki
    image: grafana/loki:3.5.7
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    volumes:
      - ~/.docker/volumes/muge/loki:/loki
      - ./config/loki.yaml:/etc/loki/local-config.yaml
    expose:
      - 3100
      - 7946
      - 9095
    depends_on:
      - alloy


  tempo:
    container_name: tempo
    image: grafana/tempo:main-736d321
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ~/.docker/volumes/muge/tempo:/tmp/tempo
      - ./config/tempo.yaml:/etc/tempo.yaml
    expose:
      - 3200         # tempo
      - 9095         # tempo grpc
      - 4317         # otlp grpc
      - 4318         # otlp http
      - 9411         # zipkin
      - 14268        # jaeger ingest
    depends_on:
      - alloy


  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.7.2
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ~/.docker/volumes/muge/prometheus:/prometheus
    expose:
      - 9090
    depends_on:
      - alloy


  pyroscope:
    container_name: pyroscope
    image: grafana/pyroscope:1.15.0
    volumes:
      - ~/.docker/volumes/muge/pyroscope:/var/lib/pyroscope
    ports:
      - 4040:4040
    depends_on:
      - alloy


  grafana:
    container_name: grafana
    image: grafana/grafana:12.2.1
    environment:
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-pyroscope-app,grafana-exploretraces-app,grafana-metricsdrilldown-app
      - GF_INSTALL_PLUGINS=raintank-worldping-app,grafana-azure-data-explorer-datasource,marcusolsson-json-datasource,redis-datasource
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - ~/.docker/volumes/muge/grafana:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/ds.yaml
      - ./config/grafana-dashboard.yml:/etc/grafana/provisioning/dashboards/sy.yaml
      - ./config/dashboards/development:/var/lib/grafana/dashboards/docker-compose
    ports:
      - 3000:3000
    depends_on:
      - loki
      - tempo
      - prometheus
      - pyroscope


  redis:
    container_name: redis
    image: docker.io/library/redis:8.2
    command: -c "redis-server --requirepass $$REDIS_PASSWORD"
    entrypoint: /bin/sh
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - ~/.docker/volumes/muge/redis/data:/data
    ports:
      - 6379:6379
    networks:
      default:
        aliases:
          - "redis-development"


  redis-insight:
    container_name: redis-insight
    image: docker.io/redis/redisinsight:2.70
    environment:
      RI_REDIS_HOST1: "redis"
      RI_REDIS_PORT1: "6379"
      RI_REDIS_ALIAS1: "redis"
      RI_REDIS_PASSWORD1: "${REDIS_PASSWORD}"
    volumes:
      - ~/.docker/volumes/muge/redis-insight/data:/db
    ports:
      - 16379:5540
    depends_on:
      - redis


  rabbitmq:
    container_name: rabbitmq
    image: docker.io/library/rabbitmq:4.1-management
    hostname: rabbit-1
    command: /bin/sh -c "rabbitmq-plugins list && rabbitmq-plugins enable rabbitmq_shovel rabbitmq_shovel_management rabbitmq_delayed_message_exchange && rabbitmq-server"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USERNAME}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASSWORD}"
      RABBITMQ_PLUGINS_DIR: "/opt/rabbitmq/plugins:/usr/lib/rabbitmq/plugins"
      # copy https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.12.0/rabbitmq_delayed_message_exchange-3.12.0.ez
      # rabbitmqctl add_user useradmin passwordadmin && rabbitmqctl set_user_tags useradmin administrator && rabbitmqctl set_permissions -p / useradmin ".*" ".*" ".*"
    volumes:
      - ~/.docker/volumes/muge/rabbitmq/mnesia:/var/lib/rabbitmq/mnesia
      - ~/.docker/volumes/muge/rabbitmq-plugins:/usr/lib/rabbitmq/plugins:ro
    ports:
      - 5672:5672
      - 15672:15672


  mssql:
    container_name: mssql
    image: cilerler/mssql-server-linux:2022-CU21-ubuntu-22.04
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
      MSSQL_SA_PASSWORD: "${MSSQL_PASSWORD}"
      MSSQL_AGENT_ENABLED: "true"
      MSSQL_ENABLE_HADR: "0"
    volumes:
      - ~/.docker/volumes/muge/mssql/data:/var/opt/mssql/data
      - ~/.docker/volumes/muge/mssql/log:/var/opt/mssql/log
      - ~/.docker/volumes/muge/mssql/secrets:/var/opt/mssql/secrets
    ports:
      - 1433:1433
    extra_hosts:
      - "production.database.windows.net:172.17.1.101"
      - "staging.database.windows.net:172.17.1.102"
      - "testing.database.windows.net:172.17.1.103"
      - "integration.database.windows.net:172.17.1.104"


  # cloudbeaver:
  #   container_name: cloudbeaver
  #   image: dbeaver/cloudbeaver:25.2.3
  #   environment:
  #     CB_ADMIN_NAME: "$(CLOUDBEAVER_USERNAME)"
  #     CB_ADMIN_PASSWORD: "$(CLOUDBEAVER_PASSWORD)"
  #     CB_SERVER_NAME: "CloudBeaver Dev"
  #     CB_SERVER_URL: "http://0.0.0.0:8978"
  #     CLOUDBEAVER_APP_SUPPORTS_CUSTOM_CONNECTIONS: "true"
  #     CLOUDBEAVER_APP_PUBLIC_CREDENTIALS_SAVE_ENABLED: "true"
  #   volumes:
  #     - ~/.docker/volumes/muge/cloudbeaver/workspace:/opt/cloudbeaver/workspace
  #   ports:
  #     - "8978:8978"
  #   depends_on:
  #     - mssql


  # mongodb:
  #   container_name: mongodb
  #   image: mongo:8.0.15
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=useradmin
  #     - MONGO_INITDB_ROOT_PASSWORD=passwordadmin
  #     - MONGO_INITDB_DATABASE=mymongodb
  #   volumes:
  #     - ~/.docker/volumes/muge/mongodb/data/db:/data/db
  #   ports:
  #     - 27017:27017
  #   networks:
  #     default:
  #       aliases:
  #         - "mongo"
  #         - "mongo-development"


  # mongo-express:
  #   container_name: mongo-express
  #   image: mongo-express:latest
  #   environment:
  #     - ME_CONFIG_MONGODB_ADMINUSERNAME=useradmin
  #     - ME_CONFIG_MONGODB_ADMINPASSWORD=passwordadmin
  #     - ME_CONFIG_MONGODB_SERVER=mongodb
  #     - ME_CONFIG_BASICAUTH_USERNAME=useradmin
  #     - ME_CONFIG_BASICAUTH_PASSWORD=passwordadmin
  #   ports:
  #     - 8081:8081
  #   depends_on:
  #     - mongodb


  # postgresql:
  #   container_name: postgresql
  #   image: postgres:16-alpine
  #   environment:
  #     - POSTGRES_USER=useradmin
  #     - POSTGRES_PASSWORD=passwordadmin
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - ~/.docker/volumes/muge/postgresql/data:/var/lib/postgresql/data


  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4:latest
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=admin@email.internal
  #     - PGADMIN_DEFAULT_PASSWORD=passwordadmin
  #   ports:
  #     - 15432:80
  #   volumes:
  #     - ~/.docker/volumes/muge/pgadmin:/var/lib/pgadmin
  #   depends_on:
  #     - postgresql


  # temporal:
  #   container_name: temporal
  #   image: temporalio/auto-setup:latest
  #   environment:
  #     - DB=postgresql
  #     - DB_PORT=5432
  #     - POSTGRES_USER=useradmin
  #     - POSTGRES_PWD=passwordadmin
  #     - POSTGRES_SEEDS=postgresql
  #     - ENABLE_ES=false
  #   ports:
  #     - 7233:7233
  #   depends_on:
  #     - postgresql


  # temporal-admin-tools:
  #   container_name: temporal-admin-tools
  #   image: temporalio/admin-tools:latest
  #   environment:
  #     - TEMPORAL_ADDRESS=temporal:7233
  #     - TEMPORAL_CLI_ADDRESS=temporal:7233
  #   depends_on:
  #     - temporal
  #   stdin_open: true
  #   tty: true


  # temporal-ui:
  #   container_name: temporal-ui
  #   image: temporalio/ui:2.15.0
  #   ports:
  #     - 17233:8080
  #   environment:
  #     - TEMPORAL_ADDRESS=temporal:7233
  #     # - TEMPORAL_CORS_ORIGINS=http://host.docker.internal:5000
  #   depends_on:
  #     - temporal


  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     # - node.name=elasticsearch
  #     # - cluster.name=docker-cluster
  #     # - cluster.initial_master_nodes=elasticsearch
  #     # - bootstrap.memory_lock=true
  #     # - 'ES_JAVA_OPTS=-Xms1024M -Xmx1024M'
  #     # - http.cors.enabled=true
  #     # - http.cors.allow-origin=*
  #     # - network.host=_eth0_
  #   # ulimits:
  #   #   nproc: 65535
  #   #   memlock:
  #   #     soft: -1
  #   #     hard: -1
  #   # cap_add:
  #   #   - ALL
  #   # privileged: true
  #   # volumes:
  #   #   - 'elastic_data:/usr/share/elasticsearch/data'
  #   #   - '/c/.ignore/volumes/elastic_data:/usr/share/elasticsearch/data'
  #   ports:
  #     - 9200:9200
  #     - 9300:9300

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.16.2
  #   container_name: kibana
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - 5601:5601
  #   # volumes:
  #   #   - ./kibana.yml:/usr/share/kibana/config/kibana.yml



  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker:/var/lib/docker:ro
  #   privileged: true




  # vault:
  #   container_name: vault
  #   image: vault:1.11.3
  #   environment:
  #     # - VAULT_DEV_ROOT_TOKEN_ID=pass
  #     - VAULT_LOG_LEVEL=info
  #     - SKIP_SETCAP=DISABLE_MEMORY_LOCKING
  #     - 'VAULT_LOCAL_CONFIG={"backend":{"file":{"path":"/vault/file"}},"default_lease_ttl":"168h","max_lease_ttl":"720h","disable_mlock":true,"ui":true, "listener": {"tcp":{"address": "0.0.0.0:8200", "tls_disable": 1}}}'
  #   command: [ 'vault', 'server', '-config=/vault/config' ]
  #   ports:
  #     - 8200:8200
  #   volumes:
  #     - ~/.docker/volumes/muge/vault/logs:/vault/logs
  #     - ~/.docker/volumes/muge/vault/file:/vault/file
  #     - ~/.docker/volumes/muge/vault/config:/vault/config
  #   cap_add:
  #     - IPC_LOCK

  # plantuml:
  #   container_name: plantuml
  #   image: plantuml/plantuml-server:latest
  #   ports:
  #     - "8080:8080"

