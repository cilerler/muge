version: '3.8'

networks:
  default:
    name: muge_network
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.32.224/27
          gateway: 192.168.32.225

services:

  # plantuml:
  #   container_name: plantuml
  #   image: plantuml/plantuml-server:tomcat
  #   ports:
  #     - "8080:8080"

  # vault:
  #   container_name: vault
  #   image: vault:1.11.3
  #   environment:
  #     # - VAULT_DEV_ROOT_TOKEN_ID=pass
  #     - VAULT_LOG_LEVEL=info
  #     - SKIP_SETCAP=DISABLE_MEMORY_LOCKING
  #     - 'VAULT_LOCAL_CONFIG={"backend":{"file":{"path":"/vault/file"}},"default_lease_ttl":"168h","max_lease_ttl":"720h","disable_mlock":true,"ui":true, "listener": {"tcp":{"address": "0.0.0.0:8200", "tls_disable": 1}}}'
  #   command: [ 'vault', 'server', '-config=/vault/config' ]
  #   ports:
  #     - "8200:8200"
  #   volumes:
  #     - ~/.docker/volumes/muge/vault/logs:/vault/logs
  #     - ~/.docker/volumes/muge/vault/file:/vault/file
  #     - ~/.docker/volumes/muge/vault/config:/vault/config
  #   cap_add:
  #     - IPC_LOCK

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-06-16T02-41-06Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        mkdir -p /data/mimir-blocks && \
        mkdir -p /data/mimir-ruler && \
        mkdir -p /data/mimir-alertmanager && \
        mkdir -p /data/tempo && \
        minio server /data \
        --console-address ':9001'
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    ports:
      - 9001:9001
    volumes:
      - ~/.docker/volumes/muge/minio/data:/data

  promtail:
    container_name: promtail
    image: grafana/promtail:main-262e9d0
    volumes:
      - ./config/promtail.yml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml

  loki:
    container_name: loki
    image: grafana/loki:main-262e9d0
    command: "-config.file=/etc/loki/config.yaml"
    ports:
      - 3100:3100
      - 7946
      - 9095
    volumes:
      - ./config/loki.yml:/etc/loki/config.yaml
    depends_on:
      - minio

  tempo:
    container_name: tempo
    image: grafana/tempo:main-9499cb9
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yml:/etc/tempo.yaml
      - ~/.docker/volumes/muge/tempo:/tmp/tempo
    ports:
      - "3200:3200" # tempo
      - "14268:14268" # jaeger ingest
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
      - "9411:9411" # zipkin
    links:
      - prometheus-server

  mimir-1:
    container_name: mimir-1
    image: grafana/mimir:2.8.0
    command: [ "-config.file=/etc/mimir.yaml" ]
    hostname: mimir-1
    depends_on:
      - minio
    volumes:
      - ./config/mimir.yml:/etc/mimir.yaml
      - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - ~/.docker/volumes/muge/mimir-1/data:/data
  mimir-2:
    container_name: mimir-2
    image: grafana/mimir:2.8.0
    command: [ "-config.file=/etc/mimir.yaml" ]
    hostname: mimir-2
    depends_on:
      - minio
    volumes:
      - ./config/mimir.yml:/etc/mimir.yaml
      - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - ~/.docker/volumes/muge/mimir-2/data:/data

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - "mimir-1"
      - "mimir-2"
    ports:
      - 9009:9009

  prometheus-server:
    container_name: prometheus-server
    image: prom/prometheus:v2.44.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ~/.docker/volumes/muge/prometheus:/prometheus
      - ./config/prometheus-rules.yml:/etc/prometheus/rules.yaml
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - "mimir-1"
      - "mimir-2"

  prometheus-pushgateway:
    container_name: prometheus-pushgateway
    image: prom/pushgateway:v1.6.0
    ports:
      - "9091:9091"

  prometheus-alertmanager:
    container_name: prometheus-alertmanager
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"

  prometheus-node-exporter:
    container_name: prometheus-node-exporter
    image: prom/node-exporter:v1.6.0
    ports:
      - "9100:9100"

  redis:
    container_name: redis
    image: "redis:7.0.11-alpine"
    ports:
      - "6379:6379"
    volumes:
      - ~/.docker/volumes/muge/redis/data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbit-1
    image: rabbitmq:3.12.0-management-alpine
    environment:
      - RABBITMQ_ERLANG_COOKIE=unique-erlang-cookie
      - RABBITMQ_DEFAULT_USER=useradmin
      - RABBITMQ_DEFAULT_PASS=passwordadmin
      - RABBITMQ_PLUGINS_DIR=/opt/rabbitmq/plugins:/usr/lib/rabbitmq/plugins
      # rabbitmqctl add_user useradmin passwordadmin && rabbitmqctl set_user_tags useradmin administrator && rabbitmqctl set_permissions -p / useradmin ".*" ".*" ".*"
    command: bash -c "rabbitmq-plugins list && rabbitmq-plugins enable rabbitmq_shovel rabbitmq_shovel_management rabbitmq_delayed_message_exchange && rabbitmq-server"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker/volumes/muge/rabbitmq:/var/lib/rabbitmq/mnesia
      - ~/.docker/volumes/muge/rabbitmq-plugins:/usr/lib/rabbitmq/plugins

  mssql:
    container_name: mssql
    image: cilerler/mssql-server-linux:2019
    ports:
      - "11433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
      - SSIS_PID=Developer
      - SA_PASSWORD=PasswordAdmin1!
      - MSSQL_AGENT_ENABLED=true
      - MSSQL_ENABLE_HADR=0
    volumes:
      - ~/.docker/volumes/muge/mssql/data:/var/opt/mssql/data
      - ~/.docker/volumes/muge/mssql/log:/var/opt/mssql/log
    extra_hosts:
      - "azuredb.database.windows.net:172.17.1.17"
    user: root

  # mongodb:
  #   container_name: mongodb
  #   image: mongo:5.0.19
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=useradmin
  #     - MONGO_INITDB_ROOT_PASSWORD=passwordadmin
  #     - MONGO_INITDB_DATABASE=mymongodb
  #   volumes:
  #     - ~/.docker/volumes/muge/mongo/data/db:/data/db
  #   ports:
  #     - "27017:27017"

  # postgresql:
  #   container_name: postgres
  #   image: postgres:15.3-alpine
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - ~/.docker/volumes/muge/postgresql/data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_USER=useradmin
  #     - POSTGRES_PASSWORD=passwordadmin

  # mysql:
  #   container_name: mysql
  #   image: mysql:8.1.0
  #   command: --default-authentication-plugin=mysql_native_password
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #       - ~/.docker/volumes/muge/mysql/:/var/lib/mysql
  #   environment:
  #     - MYSQL_DATABASE=db
  #     - MYSQL_USER=useradmin
  #     - MYSQL_PASSWORD=passwordadmin
  #     - MYSQL_ROOT_PASSWORD=passwordroot

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     # - node.name=elasticsearch
  #     # - cluster.name=docker-cluster
  #     # - cluster.initial_master_nodes=elasticsearch
  #     # - bootstrap.memory_lock=true
  #     # - 'ES_JAVA_OPTS=-Xms1024M -Xmx1024M'
  #     # - http.cors.enabled=true
  #     # - http.cors.allow-origin=*
  #     # - network.host=_eth0_
  #   # ulimits:
  #   #   nproc: 65535
  #   #   memlock:
  #   #     soft: -1
  #   #     hard: -1
  #   # cap_add:
  #   #   - ALL
  #   # privileged: true
  #   # volumes:
  #   #   - 'elastic_data:/usr/share/elasticsearch/data'
  #   #   - '/c/.ignore/volumes/elastic_data:/usr/share/elasticsearch/data'
  #   ports:
  #     - 9200:9200
  #     - 9300:9300

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.16.2
  #   container_name: kibana
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"
  #   # volumes:
  #   #   - ./kibana.yml:/usr/share/kibana/config/kibana.yml

  # seq-ingestion:
  #   container_name: "seq-ingestion"
  #   image: datalust/seq-input-gelf:latest
  #   depends_on:
  #     - seq
  #   ports:
  #     - "12201:12201/udp"
  #   environment:
  #     SEQ_ADDRESS: "http://seq:5341"
  #   restart: unless-stopped

  # seq:
  #   container_name: seq
  #   image: datalust/seq:latest
  #   environment:
  #     - ACCEPT_EULA=Y
  #   volumes:
  #     - ~/.docker/volumes/seq/data:/data
  #   ports:
  #     - "5341:5341"
  #     - "15341:80"
